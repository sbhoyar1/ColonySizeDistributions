%% Introduction

% This script evaluates the Kruskal-Wallis test on distributions. 
close all

%% Input Timepoint
i =1;
% The above variable 'i' contains specifies the timepoint that the script
% should analyze. In this set, there are three time points, day 1, day 2
% and day 4, which can be specified by setting i = 1, 2, or 3 respectively.

Day = 1; % This provides the label to the plots generated by the script

frac_cut = 0.0;
minlimit = 200;


%% Load Data

load('A1_Red.mat')
Data_Red_A1 = Data_Red;
load('A2_Red.mat')
Data_Red_A2 = Data_Red;
load('A3_Red.mat')
Data_Red_A3 = Data_Red;

load('B1_Red.mat')
Data_Red_B1 = Data_Red;
load('B2_Red.mat')
Data_Red_B2 = Data_Red;
load('B3_Red.mat')
Data_Red_B3 = Data_Red;

load('A1_Green.mat')
Data_Green_A1 = Data_Green;
load('A2_Green.mat')
Data_Green_A2 = Data_Green;
load('A3_Green.mat')
Data_Green_A3 = Data_Green;
load('B1_Green.mat')
Data_Green_B1 = Data_Green;
load('B2_Green.mat')
Data_Green_B2 = Data_Green;
load('B3_Green.mat')
Data_Green_B3 = Data_Green;

%% Create matrix of areas

% Red

A1_R_Areas = [Data_Red_A1{i, 2}.Area]';
A1_R_Areas = sort(A1_R_Areas);
lastN = round(frac_cut*size(A1_R_Areas, 1));
A1_R_Areas = A1_R_Areas(1:end-lastN,:);

A2_R_Areas = [Data_Red_A2{i, 2}.Area]';
A2_R_Areas = sort(A2_R_Areas);
lastN = round(frac_cut*size(A2_R_Areas, 1));
A2_R_Areas = A2_R_Areas(1:end-lastN,:);

A3_R_Areas = [Data_Red_A3{i, 2}.Area]';
A3_R_Areas = sort(A3_R_Areas);
lastN = round(frac_cut*size(A3_R_Areas, 1));
A3_R_Areas = A3_R_Areas(1:end-lastN,:);

B1_R_Areas = [Data_Red_B1{i, 2}.Area]';
B1_R_Areas = sort(B1_R_Areas);
lastN = round(frac_cut*size(B1_R_Areas, 1));
B1_R_Areas = B1_R_Areas(1:end-lastN,:);

B2_R_Areas = [Data_Red_B2{i, 2}.Area]';
B2_R_Areas = sort(B2_R_Areas);
lastN = round(frac_cut*size(B2_R_Areas, 1));
B2_R_Areas = B2_R_Areas(1:end-lastN,:);

B3_R_Areas = [Data_Red_B3{i, 2}.Area]';
B3_R_Areas = sort(B3_R_Areas);
lastN = round(frac_cut*size(B3_R_Areas, 1));
B3_R_Areas = B3_R_Areas(1:end-lastN,:);


A1_R_Areas(A1_R_Areas < minlimit) = [];
A2_R_Areas(A2_R_Areas < minlimit) = [];
A3_R_Areas(A3_R_Areas < minlimit) = [];

B1_R_Areas(B1_R_Areas < minlimit) = [];
B2_R_Areas(B2_R_Areas < minlimit) = [];
B3_R_Areas(B3_R_Areas < minlimit) = [];

% Green

A1_G_Areas = [Data_Green_A1{i, 2}.Area]';
A1_G_Areas = sort(A1_G_Areas);
lastN = round(frac_cut*size(A1_G_Areas, 1));
A1_G_Areas = A1_G_Areas(1:end-lastN,:);

A2_G_Areas = [Data_Green_A2{i, 2}.Area]';
A2_G_Areas = sort(A2_G_Areas);
lastN = round(frac_cut*size(A2_G_Areas, 1));
A2_G_Areas = A2_G_Areas(1:end-lastN,:);

A3_G_Areas = [Data_Green_A3{i, 2}.Area]';
A3_G_Areas = sort(A3_G_Areas);
lastN = round(frac_cut*size(A3_G_Areas, 1));
A3_G_Areas = A3_G_Areas(1:end-lastN,:);


B1_G_Areas = [Data_Green_B1{i, 2}.Area]';
B1_G_Areas = sort(B1_G_Areas);
lastN = round(frac_cut*size(B1_G_Areas, 1));
B1_G_Areas = B1_G_Areas(1:end-lastN,:);

B2_G_Areas = [Data_Green_B2{i, 2}.Area]';
B2_G_Areas = sort(B2_G_Areas);
lastN = round(frac_cut*size(B2_G_Areas, 1));
B2_G_Areas = B2_G_Areas(1:end-lastN,:);

B3_G_Areas = [Data_Green_B3{i, 2}.Area]';
B3_G_Areas = sort(B3_G_Areas);
lastN = round(frac_cut*size(B3_G_Areas, 1));
B3_G_Areas = B3_G_Areas(1:end-lastN,:);

A1_G_Areas(A1_G_Areas < minlimit) = [];
A2_G_Areas(A2_G_Areas < minlimit) = [];
A3_G_Areas(A3_G_Areas < minlimit) = [];
B1_G_Areas(B1_G_Areas < minlimit) = [];
B2_G_Areas(B2_G_Areas < minlimit) = [];
B3_G_Areas(B3_G_Areas < minlimit) = [];

%% Create Groups
% This section creates groups for the Kruskal wallis test to compare. Each color in
% a row constitues a group. It is so because we assume each row has a
% separate treatment, and we wish to compare red vs green, and row A vs Row
% B.The following scheme allows this comparison.

% In the box and whisker plots, the groups are as follows:
% Group 1 = Red colonies in Row A. Group 2 - Red colonies in Row B. 
% Group 3 = Green colonies in Row A. Group 4- Green colonies in Row B.

grp1 = zeros(size(A1_R_Areas));
grp1(:) = 1;

grp2 = zeros(size(A2_R_Areas));
grp2(:) = 1;

grp3 = zeros(size(A3_R_Areas));
grp3(:) = 1;

grp4 = zeros(size(B1_R_Areas));
grp4(:) = 2;

grp5 = zeros(size(B2_R_Areas));
grp5(:) = 2;

grp6 = zeros(size(B3_R_Areas));
grp6(:) = 2;

grp7 = zeros(size(A1_G_Areas));
grp7(:) = 3;

grp8 = zeros(size(A2_G_Areas));
grp8(:) = 3;

grp9 = zeros(size(A3_G_Areas));
grp9(:) = 3;

grp10 = zeros(size(B1_G_Areas));
grp10(:) = 4;

grp11 = zeros(size(B2_G_Areas));
grp11(:) = 4;

grp12 = zeros(size(B3_G_Areas));
grp12(:) = 4;

grp = [grp1 ; grp2 ; grp3 ; grp4 ; grp5 ; grp6 ;
       grp7 ; grp8 ; grp9 ; grp10 ; grp11 ; grp12];

%% Run the statistical test.
Areas = [A1_R_Areas;
         A2_R_Areas;
         A3_R_Areas;
         B1_R_Areas;
         B2_R_Areas;
         B3_R_Areas;
         A1_G_Areas;
         A2_G_Areas;
         A3_G_Areas;
         B1_G_Areas;
         B2_G_Areas;
         B3_G_Areas];

 [p, tbl, stats] = kruskalwallis(Areas, grp);
 figure
 c = multcompare(stats);
 
%% Plot histograms

%% 3. Obtain Probability Density Function
% This plots probability density functions for two wells, chosen by the
% user.
edges = linspace(200,10000, 50);
dist_X = edges';


% Red Distributions

A1_dist = fitdist(A1_R_Areas, 'Weibull');
A2_dist = fitdist(A2_R_Areas, 'Weibull');
A3_dist = fitdist(A3_R_Areas, 'Weibull');
B1_dist = fitdist(B1_R_Areas, 'Weibull');
B2_dist = fitdist(B2_R_Areas, 'Weibull');
B3_dist = fitdist(B3_R_Areas, 'Weibull');

a1_pdf = pdf(A1_dist, dist_X);
a2_pdf = pdf(A2_dist, dist_X);
a3_pdf = pdf(A3_dist, dist_X);
b1_pdf = pdf(B1_dist, dist_X);
b2_pdf = pdf(B2_dist, dist_X);
b3_pdf = pdf(B3_dist, dist_X);

% Green Distributions

A1_G_dist = fitdist(A1_G_Areas, 'Weibull');
A2_G_dist = fitdist(A2_G_Areas, 'Weibull');
A3_G_dist = fitdist(A3_G_Areas, 'Weibull');
B1_G_dist = fitdist(B1_G_Areas, 'Weibull');
B2_G_dist = fitdist(B2_G_Areas, 'Weibull');
B3_G_dist = fitdist(B3_G_Areas, 'Weibull');

a1_G_pdf = pdf(A1_G_dist, dist_X);
a2_G_pdf = pdf(A2_G_dist, dist_X);
a3_G_pdf = pdf(A3_G_dist, dist_X);
b1_G_pdf = pdf(B1_G_dist, dist_X);
b2_G_pdf = pdf(B2_G_dist, dist_X);
b3_G_pdf = pdf(B3_G_dist, dist_X);

figure
% Choose the first well. In this case, we have chosen well A1. The second
% well is specified in line 286
plot_a1 = plot(dist_X, a1_pdf, 'r', 'Linewidth', 2); % Red colonies
hold on
plot_a3 = plot(dist_X, a1_G_pdf, 'g', 'Linewidth', 2); % Green colonies

a1_h = histogram(A1_R_Areas, edges, 'Normalization', 'pdf');
a1_h.FaceColor = [1 0 0];
a1_h.FaceAlpha = 0.6;

a3_h = histogram(A1_G_Areas, edges, 'Normalization', 'pdf');
a3_h.FaceColor = [0 0.7 0];
a3_h.FaceAlpha = 0.4;

%% Appearance
set(gcf, 'Position', [00, -100, 700, 700])
%axis([0 10000 0 2.5e-3])
%axis([0 10000 0 80])

hTitle  = title ('Probability Density Function - Well 1'       );
hXLabel = xlabel('Pixels'                           );
hYLabel = ylabel('Probability Density'               );
hText1 = sprintf('Day = %d pixels',Day);
hText   = text(60000, 160, ...
  sprintf('\\it{Day = %d}', Day));

set( gca                                                        , ...
                'FontSize'   , 24                                           , ...
                'Position',[0.13 0.329171396140749 0.775 0.595828603859251] , ...
                'FontName'   , 'Arial'                                  );

            set([hTitle, hXLabel, hYLabel], ...
                'FontName'   , 'Arial');
            set([hXLabel, hYLabel]  , ...
                'FontSize'   , 24   , ...
                'FontWeight', 'bold' );
            set( hTitle                    , ...
                'FontSize'   , 24          , ...
                'FontWeight' , 'bold'      );
            
              % um^2 Axis
            area_ax=axes('Position', [0.1310183299389 0.206567106398069 0.799999999999999 0]);
            set(area_ax,'Units','normalized');
            set(area_ax,'Color',[0 0 0]);
            set(area_ax,'xlim',[0 (10000)*(7.25e-0)]);
            xlabel(area_ax,'Area ({\mu}m^2)','FontWeight', 'bold')


            set(gca, ...
              'Box'         , 'on'     , ...
              'TickDir'     , 'out'     , ...   %'TickLength'  , [.01 .01] , ...
              'XMinorTick'  , 'off'      , ...
              'YMinorTick'  , 'off'      , ...
              'YGrid'       , 'on'      , ...
              'XGrid'       , 'on'      , ...
              'XColor'      , [.0 .0 .0], ...
              'YColor'      , [.0 .0 .0], ...   %'YTick'       , 0:YaxisMax/10:0.6, ...
              'FontSize'    , 24       , ...
              'LineWidth'   , 1         );

%% 
figure
% Choose the second well. In this case we have chosen well 'B1'.
plot_b2 = plot(dist_X, b1_pdf, 'r', 'Linewidth', 2); % Red colonies.
hold on
plot_b3 = plot(dist_X, b1_G_pdf, 'g', 'Linewidth', 2); % Green colonies.

b2_h = histogram(B1_R_Areas, edges, 'Normalization', 'pdf');
b2_h.FaceColor = [1 0 0];
b2_h.FaceAlpha = 0.6;

b3_h = histogram(B1_G_Areas, edges, 'Normalization', 'pdf');
b3_h.FaceColor = [0 0.7 0];
b3_h.FaceAlpha = 0.4;

%% Appearance
set(gcf, 'Position', [00, -100, 700, 700])
%axis([0 10000 0 2.5e-3])
%axis([0 10000 0 80])

hTitle  = title ('Probability Density Function - Well 2'       );
hXLabel = xlabel('Pixels'                           );
hYLabel = ylabel('Probability Density'               );
hText1 = sprintf('Day = %d pixels',Day);
hText   = text(60000, 160, ...
  sprintf('\\it{Day = %d}', Day));

set( gca                       , ...
    'FontName'   , 'Helvetica' );
set([hTitle, hXLabel, hYLabel], ...
    'FontName'   , 'AvantGarde');
set([hXLabel, hYLabel]  , ...
    'FontSize'   , 14          );
set( hTitle                    , ...
    'FontSize'   , 14          , ...
    'FontWeight' , 'bold'      );
%plot(X_midpt', y, 'Linewidth', 2)
set( gca                                                        , ...
                'FontSize'   , 18                                           , ...
                'Position',[0.13 0.329171396140749 0.775 0.595828603859251] , ...
                'FontName'   , 'Helvetica'                                  );

            set([hTitle, hXLabel, hYLabel], ...
                'FontName'   , 'AvantGarde');
            set([hXLabel, hYLabel]  , ...
                'FontSize'   , 18          );
            set( hTitle                    , ...
                'FontSize'   , 18          , ...
                'FontWeight' , 'bold'      );
            
              % um^2 Axis
            area_ax=axes('Position', [0.1310183299389 0.206567106398069 0.799999999999999 0]);
            set(area_ax,'Units','normalized');
            set(area_ax,'Color',[0 0 0]);
            set(area_ax,'xlim',[0 (10000)*(7.25e-0)]);
            xlabel(area_ax,'Area ({\mu}m^2)', 'FontSize', 18)


            set(gca, ...
              'Box'         , 'on'     , ...
              'TickDir'     , 'out'     , ...   %'TickLength'  , [.01 .01] , ...
              'XMinorTick'  , 'off'      , ...
              'YMinorTick'  , 'off'      , ...
              'YGrid'       , 'on'      , ...
              'XGrid'       , 'on'      , ...
              'XColor'      , [.3 .3 .3], ...
              'YColor'      , [.3 .3 .3], ...   %'YTick'       , 0:YaxisMax/10:0.6, ...
              'FontSize'    , 18       , ...
              'LineWidth'   , 1         );
 
 %% Mean Distributions
 % This section plots the mean probability density functions, averaged
 % across each row, for the red and green colonies. 
 
 % Get Mean and SD for each point of the distributions
 mean_red_pdf = mean([a1_pdf a2_pdf a3_pdf], 2);
 mean_green_pdf = mean([a1_G_pdf a2_G_pdf a3_G_pdf], 2);
 sd_red_pdf = std([a1_pdf a2_pdf a3_pdf], 0, 2);
 sd_green_pdf = std([a1_G_pdf a2_G_pdf a3_G_pdf], 0, 2);
 
 mean_red_control_pdf = mean([b1_pdf b2_pdf b3_pdf], 2);
 mean_green_control_pdf = mean([b1_G_pdf b2_G_pdf b3_G_pdf], 2);
 sd_red_control_pdf = std([b1_pdf b2_pdf b3_pdf], 0, 2);
 sd_green_control_pdf = std([b1_G_pdf b2_G_pdf b3_G_pdf], 0, 2);
   
 figure
 
 % Plot Drug Treated Wells
  distplot_red = errorbar(dist_X, mean_red_pdf, sd_red_pdf, 'r');
  hold on
  distplot_green = errorbar(dist_X, mean_green_pdf, sd_green_pdf, 'g');
  
  % Plot Control Wells
  %distplot_c_red = errorbar(dist_X, mean_red_control_pdf, sd_red_control_pdf, 'r');
  %distplot_c_green = errorbar(dist_X, mean_green_control_pdf, sd_green_control_pdf, 'g');
  
  axis([0 4000 0 35e-4])
  %legend('Red', 'Green (Pretreated)');
  set(gcf, 'Position', [00, -100, 700, 800])
   %% Figure Properties
  distplot_red.Bar.LineStyle = 'solid';
            distplot_red.Bar.LineWidth = 1;
            distplot_red.Line.LineWidth = 4;

            distplot_green.Bar.LineStyle = 'solid';
            distplot_green.Bar.LineWidth = 1;
            distplot_green.Line.LineWidth = 4;


            set(distplot_red                     , ...
            'Color'           , [1 0 0]       , ...
            'LineWidth'       , 1.            , ...
            'Marker'          , 'o'           , ...
            'MarkerSize'      , 1             , ...
            'MarkerEdgeColor' , [1 .2 .2]     , ...
            'MarkerFaceColor' , [0.8 0 0]     );

            set(distplot_green                   , ...
            'Color'           , [0 0.5 0]     , ...
            'LineWidth'       , 1.            , ...
            'Marker'          , 'o'           , ...
            'MarkerSize'      , 1             , ...
            'MarkerEdgeColor' , [.2 1 .2]     , ...
            'MarkerFaceColor' , [0 .5 0]      );

            hTitle  = title ('Mean Probability Densities'       );
            hXLabel = xlabel(''                           );
            hYLabel = ylabel(' '               );
                        
            set( gca                                                        , ...
                'FontSize'   , 24                                           , ...
                'Position',[0.13 0.329171396140749 0.775 0.595828603859251] , ...
                'FontName'   , 'Arial'                                  );

            set([hTitle, hXLabel, hYLabel], ...
                'FontName'   , 'Arial', 'Color', [0 0 0]);
            set([hXLabel, hYLabel]  , ...
                'FontSize'   , 24          );
            set( hTitle                    , ...
                'FontSize'   , 24          , ...
                'FontWeight' , 'bold'      );
            
              % um^2 Axis
            area_ax=axes('Position', [0.1310183299389 0.206567106398069 0.799999999999999 0]);
            set(area_ax,'Units','normalized');
            set(area_ax,'Color',[0 0 0]);
            %set(area_ax,'xlim',[0 (4000)*(7.25e-0)]);
            set(area_ax,'xlim',[0 55]);
            %xlabel(area_ax,'Area ({\mu}m^2)', 'FontSize', 18)
            xlabel(area_ax,'', 'FontSize', 18)


            set(gca, ...
              'Box'         , 'on'     , ...
              'TickDir'     , 'out'     , ...   %'TickLength'  , [.01 .01] , ...
              'XMinorTick'  , 'off'      , ...
              'YMinorTick'  , 'off'      , ...
              'YGrid'       , 'on'      , ...
              'XGrid'       , 'on'      , ...
              'XColor'      , [.0 .0 .0], ...
              'YColor'      , [.0 .0 .0], ...   %'YTick'       , 0:YaxisMax/10:0.6, ...
              'FontSize'    , 24       , ...
              'LineWidth'   , 1         );